   1 #! /usr/bin/env python
   2 #  -*- coding: utf-8 -*-
   3 #
   4 # GUI module generated by PAGE version 4.24.1
   5 #  in conjunction with Tcl version 8.6
   6 #    Aug 11, 2019 12:42:17 PM CDT  platform: Windows NT
   7 
   8 import sys
   9 
  10 try:
  11     import Tkinter as tk
  12 except ImportError:
  13     import tkinter as tk
  14 
  15 try:
  16     import ttk
  17     py3 = False
  18 except ImportError:
  19     import tkinter.ttk as ttk
  20     py3 = True
  21 
  22 import Aja-PHM Semicom Suite v1_support
  23 
  24 def vp_start_gui():
  25     '''Starting point when module is the main routine.'''
  26     global val, w, root
  27     root = tk.Tk()
  28     top = Toplevel (root)
  29     Aja-PHM Semicom Suite v1_support.init(root, top)
  30     root.mainloop()
  31 
  32 w = None
  33 def create_Toplevel(root, *args, **kwargs):
  34     '''Starting point when module is imported by another program.'''
  35     global w, w_win, rt
  36     rt = root
  37     w = tk.Toplevel (root)
  38     top = Toplevel (w)
  39     Aja-PHM Semicom Suite v1_support.init(w, top, *args, **kwargs)
  40     return (w, top)
  41 
  42 def destroy_Toplevel():
  43     global w
  44     w.destroy()
  45     w = None
  46 
  47 class Toplevel:
  48     def __init__(self, top=None):
  49         '''This class configures and populates the toplevel window.
  50            top is the toplevel containing window.'''
  51         _bgcolor = '#2b2b34'  # Closest X11 color: 'gray18'
  52         _fgcolor = '#65677a'  # Closest X11 color: 'gray43'
  53         _compcolor = '#d9d9d9' # X11 color: 'gray85'
  54         _ana1color = '#d9d9d9' # X11 color: 'gray85'
  55         _ana2color = '#ececec' # Closest X11 color: 'gray92'
  56         font10 = "-family {Orator Std} -size 11 -weight normal -slant "  \
  57             "roman -underline 0 -overstrike 0"
  58         font14 = "-family {Orator Std} -size 10 -weight normal -slant "  \
  59             "roman -underline 0 -overstrike 0"
  60         self.style = ttk.Style()
  61         if sys.platform == "win32":
  62             self.style.theme_use('winnative')
  63         self.style.configure('.',background=_bgcolor)
  64         self.style.configure('.',foreground=_fgcolor)
  65         self.style.configure('.',font=font14)
  66         self.style.map('.',background=
  67             [('selected', _compcolor), ('active',_ana2color)])
  68 
  69         top.geometry("1366x705+22+4")
  70         top.title("Aja-PHM Semicom Suite v1")
  71         top.configure(background="#2b2b34")
  72         top.configure(highlightbackground="#2b2b34")
  73         top.configure(highlightcolor="white")
  74 
  75         self.menubar = tk.Menu(top,font=font10,bg='#a0a0a0',fg='#9ea0b2')
  76         top.configure(menu = self.menubar)
  77 
  78         self.menubar.add_command(
  79                 activebackground="#a0a0a0",
  80                 activeforeground="#000000",
  81                 background="#a0a0a0",
  82                 font=("-family {Orator Std} -size 11 -weight normal -slant roman -underline 0 -overstrike 0"),
  83                 foreground="#9ea0b2",
  84                 label="File")
  85         self.menubar.add_command(
  86                 activebackground="#a0a0a0",
  87                 activeforeground="#000000",
  88                 background="#a0a0a0",
  89                 font=("-family {Orator Std} -size 11 -weight normal -slant roman -underline 0 -overstrike 0"),
  90                 foreground="#9ea0b2",
  91                 label="Systems")
  92         self.menubar.add_command(
  93                 activebackground="#a0a0a0",
  94                 activeforeground="#000000",
  95                 background="#a0a0a0",
  96                 font=("-family {Orator Std} -size 11 -weight normal -slant roman -underline 0 -overstrike 0"),
  97                 foreground="#9ea0b2",
  98                 label="Environments")
  99         self.menubar.add_command(
 100                 activebackground="#a0a0a0",
 101                 activeforeground="#000000",
 102                 background="#a0a0a0",
 103                 font=("-family {Orator Std} -size 11 -weight normal -slant roman -underline 0 -overstrike 0"),
 104                 foreground="#9ea0b2",
 105                 label="Load Maintenance")
 106         self.menubar.add_command(
 107                 activebackground="#a0a0a0",
 108                 activeforeground="#000000",
 109                 background="#a0a0a0",
 110                 font=("-family {Orator Std} -size 11 -weight normal -slant roman -underline 0 -overstrike 0"),
 111                 foreground="#9ea0b2",
 112                 label="Parallel Links")
 113         self.menubar.add_command(
 114                 activebackground="#a0a0a0",
 115                 activeforeground="#000000",
 116                 background="#a0a0a0",
 117                 font=("-family {Orator Std} -size 11 -weight normal -slant roman -underline 0 -overstrike 0"),
 118                 foreground="#9ea0b2",
 119                 label="Appliances")
 120         self.menubar.add_command(
 121                 activebackground="#a0a0a0",
 122                 activeforeground="#000000",
 123                 background="#a0a0a0",
 124                 font=("-family {Orator Std} -size 11 -weight normal -slant roman -underline 0 -overstrike 0"),
 125                 foreground="#9ea0b2",
 126                 label="Terminals")
 127         self.menubar.add_command(
 128                 activebackground="#a0a0a0",
 129                 activeforeground="#000000",
 130                 background="#a0a0a0",
 131                 font=("-family {Orator Std} -size 11 -weight normal -slant roman -underline 0 -overstrike 0"),
 132                 foreground="#9ea0b2",
 133                 label="Scripts")
 134 
 135         self.TPanedwindow1 = ttk.Panedwindow(top, orient="vertical")
 136         self.TPanedwindow1.place(relx=0.051, rely=0.099, relheight=0.872
 137                 , relwidth=0.183)
 138         self.TPanedwindow1_p1 = ttk.Labelframe(height=130, text='Dashboard')
 139         self.TPanedwindow1.add(self.TPanedwindow1_p1)
 140         self.TPanedwindow1_p2 = ttk.Labelframe(text='Pane 2')
 141         self.TPanedwindow1.add(self.TPanedwindow1_p2)
 142         self.__funcid0 = self.TPanedwindow1.bind('<Map>', self.__adjust_sash0)
 143 
 144         global _images
 145         _images = (
 146 
 147          tk.PhotoImage("img_close", data='''R0lGODlhDAAMAIQUADIyMjc3Nzk5OT09PT
 148                  8/P0JCQkVFRU1NTU5OTlFRUVZWVmBgYGF hYWlpaXt7e6CgoLm5ucLCwszMzNbW
 149                  1v//////////////////////////////////// ///////////yH5BAEKAB8ALA
 150                  AAAAAMAAwAAAUt4CeOZGmaA5mSyQCIwhCUSwEIxHHW+ fkxBgPiBDwshCWHQfc5
 151                  KkoNUtRHpYYAADs= '''),
 152 
 153          tk.PhotoImage("img_closeactive", data='''R0lGODlhDAAMAIQcALwuEtIzFL46
 154                  INY0Fdk2FsQ8IdhAI9pAIttCJNlKLtpLL9pMMMNTP cVTPdpZQOBbQd60rN+1rf
 155                  Czp+zLxPbMxPLX0vHY0/fY0/rm4vvx8Pvy8fzy8P//////// ///////yH5BAEK
 156                  AB8ALAAAAAAMAAwAAAVHYLQQZEkukWKuxEgg1EPCcilx24NcHGYWFhx P0zANBE
 157                  GOhhFYGSocTsax2imDOdNtiez9JszjpEg4EAaA5jlNUEASLFICEgIAOw== '''),
 158 
 159          tk.PhotoImage("img_closepressed", data='''R0lGODlhDAAMAIQeAJ8nD64qELE
 160                  rELMsEqIyG6cyG7U1HLY2HrY3HrhBKrlCK6pGM7lD LKtHM7pKNL5MNtiViNaon
 161                  +GqoNSyq9WzrNyyqtuzq+O0que/t+bIwubJw+vJw+vTz+zT z////////yH5BAE
 162                  KAB8ALAAAAAAMAAwAAAVJIMUMZEkylGKuwzgc0kPCcgl123NcHWYW Fs6Gp2mYB
 163                  IRgR7MIrAwVDifjWO2WwZzpxkxyfKVCpImMGAeIgQDgVLMHikmCRUpMQgA7 ''')
 164         )
 165 
 166         self.style.element_create("close", "image", "img_close",
 167                ("active", "pressed", "!disabled", "img_closepressed"),
 168                ("active", "alternate", "!disabled",
 169                "img_closeactive"), border=8, sticky='')
 170 
 171         self.style.layout("ClosetabNotebook", [("ClosetabNotebook.client",
 172                                      {"sticky": "nswe"})])
 173         self.style.layout("ClosetabNotebook.Tab", [
 174             ("ClosetabNotebook.tab",
 175               { "sticky": "nswe",
 176                 "children": [
 177                     ("ClosetabNotebook.padding", {
 178                         "side": "top",
 179                         "sticky": "nswe",
 180                         "children": [
 181                             ("ClosetabNotebook.focus", {
 182                                 "side": "top",
 183                                 "sticky": "nswe",
 184                                 "children": [
 185                                     ("ClosetabNotebook.label", {"side":
 186                                       "left", "sticky": ''}),
 187                                     ("ClosetabNotebook.close", {"side":
 188                                         "left", "sticky": ''}),]})]})]})])
 189 
 190         PNOTEBOOK = "ClosetabNotebook" 
 191 
 192         self.style.configure('TNotebook.Tab', background=_bgcolor)
 193         self.style.configure('TNotebook.Tab', foreground=_fgcolor)
 194         self.style.map('TNotebook.Tab', background=
 195             [('selected', _compcolor), ('active',_ana2color)])
 196         self.PNotebook1 = ttk.Notebook(self.TPanedwindow1_p2)
 197         self.PNotebook1.place(relx=0.04, rely=0.083, relheight=0.496
 198                 , relwidth=0.936, bordermode='ignore')
 199         self.PNotebook1.configure(width=300)
 200         self.PNotebook1.configure(style=PNOTEBOOK)
 201         self.PNotebook1_t0 = tk.Frame(self.PNotebook1)
 202         self.PNotebook1.add(self.PNotebook1_t0, padding=3)
 203         self.PNotebook1.tab(0, text="S-Terminal", compound="none", underline="-1"
 204                 ,)
 205         self.PNotebook1_t0.configure(background="#2b2b34")
 206         self.PNotebook1_t0.configure(highlightbackground="#2b2b34")
 207         self.PNotebook1_t0.configure(highlightcolor="white")
 208         self.PNotebook1_t1 = tk.Frame(self.PNotebook1)
 209         self.PNotebook1.add(self.PNotebook1_t1, padding=3)
 210         self.PNotebook1.tab(1, text="Testbeds",compound="none",underline="-1",)
 211         self.PNotebook1_t1.configure(background="#2b2b34")
 212         self.PNotebook1_t1.configure(highlightbackground="#2b2b34")
 213         self.PNotebook1_t1.configure(highlightcolor="white")
 214         self.PNotebook1.bind('<Button-1>',_button_press)
 215         self.PNotebook1.bind('<ButtonRelease-1>',_button_release)
 216         self.PNotebook1.bind('<Motion>',_mouse_over)
 217 
 218         self.TPanedwindow4 = ttk.Panedwindow(self.TPanedwindow1_p2
 219                 , orient="vertical")
 220         self.TPanedwindow4.place(relx=-0.92, rely=0.458, relheight=0.26
 221                 , relwidth=0.8, bordermode='ignore')
 222         self.TPanedwindow4_p2 = ttk.Labelframe(text='Pane 2')
 223         self.TPanedwindow4.add(self.TPanedwindow4_p2)
 224         self.__funcid1 = self.TPanedwindow4.bind('<Map>', self.__adjust_sash1)
 225 
 226         self.TPanedwindow5 = ttk.Panedwindow(self.TPanedwindow1_p2
 227                 , orient="vertical")
 228         self.TPanedwindow5.place(relx=0.04, rely=0.563, relheight=0.427
 229                 , relwidth=0.92, bordermode='ignore')
 230         self.TPanedwindow5.configure(width=230)
 231         self.TPanedwindow5_p1 = ttk.Labelframe(height=75, text='Pane 1')
 232         self.TPanedwindow5.add(self.TPanedwindow5_p1)
 233         self.TPanedwindow5_p2 = ttk.Labelframe(text='Pane 2')
 234         self.TPanedwindow5.add(self.TPanedwindow5_p2)
 235         self.__funcid2 = self.TPanedwindow5.bind('<Map>', self.__adjust_sash2)
 236 
 237         self.TFrame1 = ttk.Frame(top)
 238         self.TFrame1.place(relx=0.242, rely=0.113, relheight=0.858
 239                 , relwidth=0.714)
 240         self.TFrame1.configure(relief='groove')
 241         self.TFrame1.configure(borderwidth="2")
 242         self.TFrame1.configure(relief="groove")
 243         self.TFrame1.configure(width=975)
 244 
 245         self.TPanedwindow2 = ttk.Panedwindow(self.TFrame1, orient="horizontal")
 246         self.TPanedwindow2.place(relx=0.026, rely=0.05, relheight=0.893
 247                 , relwidth=0.395)
 248         self.TPanedwindow2_p1 = ttk.Labelframe(width=270, text='Beamology')
 249         self.TPanedwindow2.add(self.TPanedwindow2_p1)
 250         self.TPanedwindow2_p2 = ttk.Labelframe(text='Timestables')
 251         self.TPanedwindow2.add(self.TPanedwindow2_p2)
 252         self.__funcid3 = self.TPanedwindow2.bind('<Map>', self.__adjust_sash3)
 253 
 254         self.style.configure('Treeview.Heading',  font=font14)
 255         self.Scrolledtreeview1 = ScrolledTreeView(self.TPanedwindow2_p1)
 256         self.Scrolledtreeview1.place(relx=0.037, rely=0.074, relheight=0.846
 257                 , relwidth=0.926, bordermode='ignore')
 258         self.Scrolledtreeview1.configure(columns="Col1")
 259         # build_treeview_support starting.
 260         self.Scrolledtreeview1.heading("#0",text="Tree")
 261         self.Scrolledtreeview1.heading("#0",anchor="center")
 262         self.Scrolledtreeview1.column("#0",width="115")
 263         self.Scrolledtreeview1.column("#0",minwidth="20")
 264         self.Scrolledtreeview1.column("#0",stretch="1")
 265         self.Scrolledtreeview1.column("#0",anchor="w")
 266         self.Scrolledtreeview1.heading("Col1",text="Col1")
 267         self.Scrolledtreeview1.heading("Col1",anchor="center")
 268         self.Scrolledtreeview1.column("Col1",width="116")
 269         self.Scrolledtreeview1.column("Col1",minwidth="20")
 270         self.Scrolledtreeview1.column("Col1",stretch="1")
 271         self.Scrolledtreeview1.column("Col1",anchor="w")
 272 
 273         self.TPanedwindow2_p2 = ttk.Labelframe(self.TPanedwindow2_p2)
 274         self.TPanedwindow2_p2.place(relx=2.455, rely=-0.13, relheight=1.0
 275                 , relwidth=2.182, bordermode='ignore')
 276         self.TPanedwindow2_p2.configure(relief='')
 277         self.TPanedwindow2_p2.configure(text='''Pane 2''')
 278         self.TPanedwindow2_p2.configure(width=245)
 279 
 280         self.TPanedwindow3 = ttk.Panedwindow(self.TFrame1, orient="horizontal")
 281         self.TPanedwindow3.place(relx=0.503, rely=0.05, relheight=0.893
 282                 , relwidth=0.395)
 283         self.TPanedwindow3_p1 = ttk.Labelframe(width=280
 284                 , text='Build Supervisors')
 285         self.TPanedwindow3.add(self.TPanedwindow3_p1)
 286         self.TPanedwindow3_p2 = ttk.Labelframe(text='Timestable')
 287         self.TPanedwindow3.add(self.TPanedwindow3_p2)
 288         self.__funcid4 = self.TPanedwindow3.bind('<Map>', self.__adjust_sash4)
 289 
 290         self.Scrolledtreeview2 = ScrolledTreeView(self.TPanedwindow3_p1)
 291         self.Scrolledtreeview2.place(relx=0.036, rely=0.074, relheight=0.883
 292                 , relwidth=0.929, bordermode='ignore')
 293         self.Scrolledtreeview2.configure(columns="Col1")
 294         # build_treeview_support starting.
 295         self.Scrolledtreeview2.heading("#0",text="Tree")
 296         self.Scrolledtreeview2.heading("#0",anchor="center")
 297         self.Scrolledtreeview2.column("#0",width="120")
 298         self.Scrolledtreeview2.column("#0",minwidth="20")
 299         self.Scrolledtreeview2.column("#0",stretch="1")
 300         self.Scrolledtreeview2.column("#0",anchor="w")
 301         self.Scrolledtreeview2.heading("Col1",text="Col1")
 302         self.Scrolledtreeview2.heading("Col1",anchor="center")
 303         self.Scrolledtreeview2.column("Col1",width="121")
 304         self.Scrolledtreeview2.column("Col1",minwidth="20")
 305         self.Scrolledtreeview2.column("Col1",stretch="1")
 306         self.Scrolledtreeview2.column("Col1",anchor="w")
 307 
 308     def __adjust_sash0(self, event):
 309         paned = event.widget
 310         pos = [130, ]
 311         i = 0
 312         for sash in pos:
 313             paned.sashpos(i, sash)
 314             i += 1
 315         paned.unbind('<map>', self.__funcid0)
 316         del self.__funcid0
 317 
 318     def __adjust_sash1(self, event):
 319         paned = event.widget
 320         pos = []
 321         i = 0
 322         for sash in pos:
 323             paned.sashpos(i, sash)
 324             i += 1
 325         paned.unbind('<map>', self.__funcid1)
 326         del self.__funcid1
 327 
 328     def __adjust_sash2(self, event):
 329         paned = event.widget
 330         pos = [75, ]
 331         i = 0
 332         for sash in pos:
 333             paned.sashpos(i, sash)
 334             i += 1
 335         paned.unbind('<map>', self.__funcid2)
 336         del self.__funcid2
 337 
 338     def __adjust_sash3(self, event):
 339         paned = event.widget
 340         pos = [270, ]
 341         i = 0
 342         for sash in pos:
 343             paned.sashpos(i, sash)
 344             i += 1
 345         paned.unbind('<map>', self.__funcid3)
 346         del self.__funcid3
 347 
 348     def __adjust_sash4(self, event):
 349         paned = event.widget
 350         pos = [280, ]
 351         i = 0
 352         for sash in pos:
 353             paned.sashpos(i, sash)
 354             i += 1
 355         paned.unbind('<map>', self.__funcid4)
 356         del self.__funcid4
 357 
 358 # The following code is add to handle mouse events with the close icons
 359 # in PNotebooks widgets.
 360 def _button_press(event):
 361     widget = event.widget
 362     element = widget.identify(event.x, event.y)
 363     if "close" in element:
 364         index = widget.index("@%d,%d" % (event.x, event.y))
 365         widget.state(['pressed'])
 366         widget._active = index
 367 
 368 def _button_release(event):
 369     widget = event.widget
 370     if not widget.instate(['pressed']):
 371             return
 372     element = widget.identify(event.x, event.y)
 373     try:
 374         index = widget.index("@%d,%d" % (event.x, event.y))
 375     except TclError:
 376         pass
 377     if "close" in element and widget._active == index:
 378         widget.forget(index)
 379         widget.event_generate("<<NotebookTabClosed>>")
 380 
 381     widget.state(['!pressed'])
 382     widget._active = None
 383 
 384 def _mouse_over(event):
 385     widget = event.widget
 386     element = widget.identify(event.x, event.y)
 387     if "close" in element:
 388         widget.state(['alternate'])
 389     else:
 390         widget.state(['!alternate'])
 391 
 392 # The following code is added to facilitate the Scrolled widgets you specified.
 393 class AutoScroll(object):
 394     '''Configure the scrollbars for a widget.'''
 395 
 396     def __init__(self, master):
 397         #  Rozen. Added the try-except clauses so that this class
 398         #  could be used for scrolled entry widget for which vertical
 399         #  scrolling is not supported. 5/7/14.
 400         try:
 401             vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
 402         except:
 403             pass
 404         hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
 405 
 406         #self.configure(yscrollcommand=_autoscroll(vsb),
 407         #    xscrollcommand=_autoscroll(hsb))
 408         try:
 409             self.configure(yscrollcommand=self._autoscroll(vsb))
 410         except:
 411             pass
 412         self.configure(xscrollcommand=self._autoscroll(hsb))
 413 
 414         self.grid(column=0, row=0, sticky='nsew')
 415         try:
 416             vsb.grid(column=1, row=0, sticky='ns')
 417         except:
 418             pass
 419         hsb.grid(column=0, row=1, sticky='ew')
 420 
 421         master.grid_columnconfigure(0, weight=1)
 422         master.grid_rowconfigure(0, weight=1)
 423 
 424         # Copy geometry methods of master  (taken from ScrolledText.py)
 425         if py3:
 426             methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
 427                   | tk.Place.__dict__.keys()
 428         else:
 429             methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
 430                   + tk.Place.__dict__.keys()
 431 
 432         for meth in methods:
 433             if meth[0] != '_' and meth not in ('config', 'configure'):
 434                 setattr(self, meth, getattr(master, meth))
 435 
 436     @staticmethod
 437     def _autoscroll(sbar):
 438         '''Hide and show scrollbar as needed.'''
 439         def wrapped(first, last):
 440             first, last = float(first), float(last)
 441             if first <= 0 and last >= 1:
 442                 sbar.grid_remove()
 443             else:
 444                 sbar.grid()
 445             sbar.set(first, last)
 446         return wrapped
 447 
 448     def __str__(self):
 449         return str(self.master)
 450 
 451 def _create_container(func):
 452     '''Creates a ttk Frame with a given master, and use this new frame to
 453     place the scrollbars and the widget.'''
 454     def wrapped(cls, master, **kw):
 455         container = ttk.Frame(master)
 456         container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
 457         container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
 458         return func(cls, container, **kw)
 459     return wrapped
 460 
 461 class ScrolledTreeView(AutoScroll, ttk.Treeview):
 462     '''A standard ttk Treeview widget with scrollbars that will
 463     automatically show/hide as needed.'''
 464     @_create_container
 465     def __init__(self, master, **kw):
 466         ttk.Treeview.__init__(self, master, **kw)
 467         AutoScroll.__init__(self, master)
 468 
 469 import platform
 470 def _bound_to_mousewheel(event, widget):
 471     child = widget.winfo_children()[0]
 472     if platform.system() == 'Windows' or platform.system() == 'Darwin':
 473         child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
 474         child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
 475     else:
 476         child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
 477         child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
 478         child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
 479         child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))
 480 
 481 def _unbound_to_mousewheel(event, widget):
 482     if platform.system() == 'Windows' or platform.system() == 'Darwin':
 483         widget.unbind_all('<MouseWheel>')
 484         widget.unbind_all('<Shift-MouseWheel>')
 485     else:
 486         widget.unbind_all('<Button-4>')
 487         widget.unbind_all('<Button-5>')
 488         widget.unbind_all('<Shift-Button-4>')
 489         widget.unbind_all('<Shift-Button-5>')
 490 
 491 def _on_mousewheel(event, widget):
 492     if platform.system() == 'Windows':
 493         widget.yview_scroll(-1*int(event.delta/120),'units')
 494     elif platform.system() == 'Darwin':
 495         widget.yview_scroll(-1*int(event.delta),'units')
 496     else:
 497         if event.num == 4:
 498             widget.yview_scroll(-1, 'units')
 499         elif event.num == 5:
 500             widget.yview_scroll(1, 'units')
 501 
 502 def _on_shiftmouse(event, widget):
 503     if platform.system() == 'Windows':
 504         widget.xview_scroll(-1*int(event.delta/120), 'units')
 505     elif platform.system() == 'Darwin':
 506         widget.xview_scroll(-1*int(event.delta), 'units')
 507     else:
 508         if event.num == 4:
 509             widget.xview_scroll(-1, 'units')
 510         elif event.num == 5:
 511             widget.xview_scroll(1, 'units')
 512 
 513 if __name__ == '__main__':
 514     vp_start_gui()
 515 
